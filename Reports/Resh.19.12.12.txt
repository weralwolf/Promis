Внутрішній обмін данними системи PROMIS відбувається за допомогою файлів у JSON-форматі, котрі проходять обробку у автоматичному режимі. Для цього використовується набір python-скриптів котрі спроектовані з можливістю легкого розширення та супроводження. Усі скрипти можна розбити на кілька категорій:

1. Конфігураційні скрипти (config), що містять параметри локального середовища виконання (environment). До котрих належать параметри підключення до серверу баз динних, налаштування режиму виконання скриптів та рівню ведення журналу (logging level) та інші, що можуть бути запроваджені в процесі подальшої розробки. Всі скрипти даної категорії розповсюджуються з розширенням "*.py.tmpl" і містять лише структуру конфігурації із параметрами за замовчанням. Це зроблено для запобігання конфліктів у системі контролю версій та зі зручності командної розробки. Перед використанням користувач має скопіювати кожен з таких файлів усунувши з розширення частину ".tmpl" та вписати локальні налаштування власного середовища. У файлі ".gitignore" прописані правила ігнорування конкретних налаштувань для запобігання випадкового додавання таких у робочу гілку системи контролю версій.

2. Скрипти загального призначення (common), представляють собою елементи загальних та не конкретизованих концепцій чи алгоритмів, що використовуються в коді і прямо не пов’язані з обробкою обмінних файлів. Це зроблено із зручності їх використання та логічного розділення конкретного робочого коду від загальних рішень, що спрощують реалізацію конкретних задач.

3. Моделі таблиць бази даних (db), представляють собою декларацію таблиць бази даних, що спроектована для збереження супутникових даних різнорідних проектів та оптимізована для максимального узагальнення таких. Кожна таблиця представлена у вигляді класу-моделі та декларує структуру конкретної таблиці, що розміщена на сервері. Декларація впроваджується методами відкритої бібліотеки SqlAlchemy, що наявна у вільному доступі. Декларування робиться згідно концепції ORM (Object-relational mapping - об’єктно-реляційна проекція) та повноцінно описує структури даних, що дозволяє позбутися великої кількості проблем зміни серверів бази даних, а також зв’язування даних між собою. Такий спосіб запису робочих моделей в коді дає легкість та зручність як у записі так і зчитуванні даних з їх одночасним зв’язуванням.

Також в категорії моделей бази даних присутні:
    - інтерфейс InjectiveTable, що характеризує класи, котрі мають можливість вставки та запису даних в базу даних
    - інтерфейс Base, що дає можливість перетворити будь-який клас нащадок в модель ORM

Важливим елементом цієї категорії є клас Scope (область видимості), що котролює ключі-зв’язки між записами таблиць бази даних. Scope - є контролюючим елементом декларативної структури обмінного файлу та робочого механізму вставки даних в структуру бази. Даний об’єкт контролює рівні вкладення дерева даних та несе з собою інформацію про різнорівневі зв’язки між даними. Оперуючи цією інформацією в будь-який момент розбору обмінного файлу даючи нам можливість встановити зв’язки із даними, що вставляються або вже були записані раніше. Також він надає можливість користувачеві конкретизувати області зв’язування даних та вказати конкретні сутності котрі мають бути пов’язані з поточною інформацією. Докладну інформацію, щодо використання та принципів роботи можна віднайти в додатку 2.

4. Алгоритми обробки (src) представляють набір для аналізу та формування обміних файлів. Алгоритми розміщені в кореневому каталозі та розділені окремими файлами.

Механіка процесу аналізу пов’язана з рекурсивним розкручуванням дерева об’єктів обмінного файлу. Обходячи структуру алгоритм аналізу керується поняттям injector, що представлений ключем словника (невпорядкованого набору пар ключ - значення) котрий використає інформацію, що слідує за ключем для представлення її у вигляді набору записів, що будуть вставлені в базу даних. До списку injectors належать усі таблиці, що можуть бути редаговані користувачем(через обмінні файли) та ін’єкцій scope, для конкретизації точки призначення даних.

Процес формування обмінних файлів зворотній до процесу аналізу і включає в себе першопочатково: визначення об’єму даних, що мають бути виділені з бази даних. Після чого має бути встановлена та сформована в деревоподібну структуру необхідна та достатня інформація для конкретизації зв’язку даних з іншими сутностями бази даних.
